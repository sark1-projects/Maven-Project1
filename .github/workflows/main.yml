name: main

on:
  pull_request:
    branches:    
      - master
      - develop
      - feature
     
  workflow_dispatch:
  
jobs:
  pipelineconfig:
     uses: sark1-projects/Maven-Project1/.github/workflows/pipelineconfig.yml@master
     
 
  compile-java-maven:
     needs: pipelineconfig
     if: "contains(needs.pipelineconfig.outputs.buildTool, 'maven') && contains(needs.pipelineconfig.outputs.language, 'java')"
     uses: sark1-projects/Main/.github/workflows/pullandpush.yml@main
     with:
      java-version: ${{ needs.pipelineconfig.outputs.javaVersion}}
   
      
     
  compile-npm:
    needs: pipelineconfig
    if: "contains(needs.pipelineconfig.outputs.buildTool, 'npm') && contains(needs.pipelineconfig.outputs.language, 'java') && contains(needs.pipelineconfig.outputs.javaVersion, 1.8)"
    uses: sark1-projects/Maven-Project1/.github/workflows/npm.yml@master
    with:
      image_name: ubuntu
    secrets:
       registry_username: ${{ secrets.REGISTRY_USERNAME }}
       registry_password: ${{ secrets.REGISTRY_PASSWORD }}
  compile-ng:
    needs: pipelineconfig
    if: "contains(needs.pipelineconfig.outputs.buildTool, 'ng')"
    uses: sark1-projects/Maven-Project1/.github/workflows/ng.yml@master
    
    
  Code-Quality:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [compile-npm,compile-ng,compile-java-maven]
    runs-on: ubuntu-latest
    container: 
      image: ubuntu

    steps:
       - uses: actions/checkout@v3
       - name: code Analysis
         run: echo 'mvn sonar:sonar'
       - name: Download artifacts
         uses: actions/download-artifact@v2
         with:
           name: artifacts
       - name: show artifacts
         run: echo artifact downloaded
          
  security-scan:
    if: ${{ contains(join(needs.*.result, ','), 'success') && !contains(join(needs.*.result, ','), 'failure')}}
    needs: [Code-Quality]
    #if: github.event.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v3
       - name: scanning
         run: echo 'scanning'
         
  Quality-Gates:
    if: ${{ always() }}
    needs: security-scan
    #if: github.event.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v3
       - name: CodeAnalysis_Quality_gates
         run: echo 'code analysis quality gates'
       - name: SecurityAnalysis_Quality_gates
         run: echo 'security analysis quality gates'
         
  ChangeRequest_Validation:
    if: ${{ always() && github.event.ref == 'refs/heads/master' }}
    needs: Quality-Gates
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - name: validations status
        run: echo 'ChangeRequest Validation "performed"'
    
  Deploy_Develop:
    if: ${{ always() && github.event.ref == 'refs/heads/feature' }}
    runs-on: ubuntu-latest
    environment: 
      name: Development 
    needs: Quality-Gates
    steps:
       - uses: actions/checkout@v3
       - name: deploying
         run: echo 'feature branch'
   
  
  Deploy_Stage:
    if: ${{ always() && github.event.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    environment: 
      name: Staging 
    needs: Quality-Gates
    steps:
       - uses: actions/checkout@v3
       - name: deploying into develop branch
         run: echo 'develop branch'
         
  Deploy_PROD:
    if: ${{ always() && github.event.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    environment: 
      name: Production
    needs: [ChangeRequest_Validation]
    steps:
       - uses: actions/checkout@v3
       - name: deploying to Prod
         run: echo 'master branch'
